import json
import os
from datetime import datetime
from libraryapp import create_app
from libraryapp.extensions import db
from libraryapp.models import User, UserRole, Author, Publisher, Category, Book


def load_json_file(filename):
    """Load d·ªØ li·ªáu t·ª´ file JSON"""
    try:
        with open(filename, 'r', encoding='utf-8') as f:
            return json.load(f)
    except FileNotFoundError:
        print(f"‚ùå Kh√¥ng t√¨m th·∫•y file: {filename}")
        return []
    except json.JSONDecodeError:
        print(f"‚ùå L·ªói ƒë·ªçc file JSON: {filename}")
        return []


def import_authors():
    """Import d·ªØ li·ªáu t√°c gi·∫£"""
    authors_data = load_json_file('data/auth.json')

    for author_data in authors_data:
        # Ki·ªÉm tra xem t√°c gi·∫£ ƒë√£ t·ªìn t·∫°i ch∆∞a
        existing_author = Author.query.filter_by(id=author_data['id']).first()
        if existing_author:
            print(f"‚ö†Ô∏è  T√°c gi·∫£ {author_data['first_name']} {author_data['last_name']} ƒë√£ t·ªìn t·∫°i")
            continue

        author = Author(
            id=author_data['id'],
            first_name=author_data['first_name'],
            last_name=author_data['last_name']
        )
        db.session.add(author)

    db.session.commit()
    print(f"‚úÖ ƒê√£ import {len(authors_data)} t√°c gi·∫£")


def import_categories():
    """Import d·ªØ li·ªáu danh m·ª•c"""
    categories_data = load_json_file('data/cate.json')

    for category_data in categories_data:
        # Ki·ªÉm tra xem danh m·ª•c ƒë√£ t·ªìn t·∫°i ch∆∞a
        existing_category = Category.query.filter_by(id=category_data['id']).first()
        if existing_category:
            print(f"‚ö†Ô∏è  Danh m·ª•c {category_data['name']} ƒë√£ t·ªìn t·∫°i")
            continue

        category = Category(
            id=category_data['id'],
            name=category_data['name']
        )
        db.session.add(category)

    db.session.commit()
    print(f"‚úÖ ƒê√£ import {len(categories_data)} danh m·ª•c")


def import_publishers():
    """Import d·ªØ li·ªáu nh√† xu·∫•t b·∫£n"""
    publishers_data = load_json_file('data/pub.json')

    for publisher_data in publishers_data:
        # Ki·ªÉm tra xem nh√† xu·∫•t b·∫£n ƒë√£ t·ªìn t·∫°i ch∆∞a
        existing_publisher = Publisher.query.filter_by(id=publisher_data['id']).first()
        if existing_publisher:
            print(f"‚ö†Ô∏è  Nh√† xu·∫•t b·∫£n {publisher_data['name']} ƒë√£ t·ªìn t·∫°i")
            continue

        publisher = Publisher(
            id=publisher_data['id'],
            name=publisher_data['name']
        )
        db.session.add(publisher)

    db.session.commit()
    print(f"‚úÖ ƒê√£ import {len(publishers_data)} nh√† xu·∫•t b·∫£n")


def import_books():
    """Import d·ªØ li·ªáu s√°ch"""
    books_data = load_json_file('data/books.json')

    for book_data in books_data:
        # Ki·ªÉm tra xem s√°ch ƒë√£ t·ªìn t·∫°i ch∆∞a
        existing_book = Book.query.filter_by(id=book_data['id']).first()
        if existing_book:
            print(f"‚ö†Ô∏è  S√°ch {book_data['name']} ƒë√£ t·ªìn t·∫°i")
            continue

        # Chuy·ªÉn ƒë·ªïi created_date t·ª´ string sang datetime
        created_date = datetime.strptime(book_data['created_date'], '%Y-%m-%d %H:%M:%S')

        book = Book(
            id=book_data['id'],
            name=book_data['name'],
            description=book_data['description'],
            price=book_data['price'],
            image=book_data['image'],
            active=bool(book_data['active']),
            category_id=book_data['category_id'],
            created_date=created_date,
            author_id=book_data['author_id'],
            publisher_id=book_data['publisher_id'],
            quantity=book_data['quantity']
        )
        db.session.add(book)

    db.session.commit()
    print(f"‚úÖ ƒê√£ import {len(books_data)} s√°ch")


def check_data_integrity():
    """Ki·ªÉm tra t√≠nh to√†n v·∫πn d·ªØ li·ªáu"""
    print("\nüìä Ki·ªÉm tra d·ªØ li·ªáu:")
    print(f"- T√°c gi·∫£: {Author.query.count()}")
    print(f"- Danh m·ª•c: {Category.query.count()}")
    print(f"- Nh√† xu·∫•t b·∫£n: {Publisher.query.count()}")
    print(f"- S√°ch: {Book.query.count()}")
    print(f"- Ng∆∞·ªùi d√πng: {User.query.count()}")

    # Ki·ªÉm tra foreign key
    orphaned_books = Book.query.filter(
        ~Book.author_id.in_(db.session.query(Author.id)) |
        ~Book.category_id.in_(db.session.query(Category.id)) |
        ~Book.publisher_id.in_(db.session.query(Publisher.id))
    ).count()

    if orphaned_books > 0:
        print(f"‚ö†Ô∏è  C√≥ {orphaned_books} s√°ch c√≥ v·∫•n ƒë·ªÅ v·ªÅ kh√≥a ngo·∫°i")
    else:
        print("‚úÖ T·∫•t c·∫£ d·ªØ li·ªáu ƒë·ªÅu h·ª£p l·ªá")


def main():
    """H√†m ch√≠nh ƒë·ªÉ import t·∫•t c·∫£ d·ªØ li·ªáu"""
    app = create_app()

    with app.app_context():
        print("üöÄ B·∫Øt ƒë·∫ßu import d·ªØ li·ªáu...")

        # Ki·ªÉm tra xem th∆∞ m·ª•c data c√≥ t·ªìn t·∫°i kh√¥ng
        if not os.path.exists('data'):
            print("‚ùå Th∆∞ m·ª•c 'data' kh√¥ng t·ªìn t·∫°i. Vui l√≤ng t·∫°o th∆∞ m·ª•c v√† ƒë·∫∑t c√°c file JSON v√†o ƒë√≥.")
            return

        # Import theo th·ª© t·ª± (quan tr·ªçng v√¨ c√≥ foreign key)
        try:
            # 1. Import authors tr∆∞·ªõc
            print("\n1Ô∏è‚É£ Import t√°c gi·∫£...")
            import_authors()

            # 2. Import categories
            print("\n2Ô∏è‚É£ Import danh m·ª•c...")
            import_categories()

            # 3. Import publishers
            print("\n3Ô∏è‚É£ Import nh√† xu·∫•t b·∫£n...")
            import_publishers()

            # 4. Import books cu·ªëi c√πng
            print("\n4Ô∏è‚É£ Import s√°ch...")
            import_books()

            # 5. Ki·ªÉm tra d·ªØ li·ªáu
            check_data_integrity()

            print("\nüéâ Ho√†n th√†nh import d·ªØ li·ªáu!")

        except Exception as e:
            print(f"‚ùå L·ªói khi import d·ªØ li·ªáu: {e}")
            db.session.rollback()


if __name__ == '__main__':
    main()